com.squareup.okhttp.Address -> com.a.a.a:
    java.net.Proxy proxy -> a
    java.lang.String uriHost -> b
    int uriPort -> c
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> d
    javax.net.ssl.HostnameVerifier hostnameVerifier -> e
    java.lang.String getUriHost() -> a
    javax.net.ssl.SSLSocketFactory getSslSocketFactory() -> b
    java.net.Proxy getProxy() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.squareup.okhttp.Connection -> com.a.a.b:
    byte[] NPN_PROTOCOLS -> a
    byte[] SPDY3 -> b
    byte[] HTTP_11 -> c
    com.squareup.okhttp.Route route -> d
    java.net.Socket socket -> e
    java.io.InputStream in -> f
    java.io.OutputStream out -> g
    boolean connected -> h
    com.squareup.okhttp.internal.spdy.SpdyConnection spdyConnection -> i
    int httpMinorVersion -> j
    long idleStartTimeNs -> k
    void connect(int,int,com.squareup.okhttp.TunnelRequest) -> a
    void upgradeToTls(com.squareup.okhttp.TunnelRequest) -> a
    boolean isConnected() -> a
    void close() -> close
    com.squareup.okhttp.Route getRoute() -> b
    java.net.Socket getSocket() -> c
    boolean isAlive() -> d
    void resetIdleStartTime() -> e
    boolean isIdle() -> f
    boolean isExpired(long) -> a
    long getIdleStartTimeNs() -> g
    java.lang.Object newTransport(com.squareup.okhttp.internal.http.HttpEngine) -> a
    boolean isSpdy() -> h
    int getHttpMinorVersion() -> i
    void setHttpMinorVersion(int) -> a
    boolean requiresTunnel() -> j
    void makeTunnel(com.squareup.okhttp.TunnelRequest) -> b
com.squareup.okhttp.ConnectionPool -> com.a.a.c:
    com.squareup.okhttp.ConnectionPool systemDefault -> a
    int maxIdleConnections -> b
    long keepAliveDurationNs -> c
    java.util.LinkedList connections -> d
    java.util.concurrent.ExecutorService executorService -> e
    java.util.concurrent.Callable connectionsCleanupCallable -> f
    com.squareup.okhttp.ConnectionPool getDefault() -> a
    com.squareup.okhttp.Connection get(com.squareup.okhttp.Address) -> a
    void recycle(com.squareup.okhttp.Connection) -> a
    void maybeShare(com.squareup.okhttp.Connection) -> b
    java.util.LinkedList access$0(com.squareup.okhttp.ConnectionPool) -> a
    long access$1(com.squareup.okhttp.ConnectionPool) -> b
    int access$2(com.squareup.okhttp.ConnectionPool) -> c
com.squareup.okhttp.ConnectionPool$1 -> com.a.a.d:
    com.squareup.okhttp.ConnectionPool this$0 -> a
    java.lang.Void call() -> a
    java.lang.Object call() -> call
com.squareup.okhttp.HttpResponseCache -> com.a.a.e:
    char[] DIGITS -> b
    com.squareup.okhttp.internal.DiskLruCache cache -> c
    int writeSuccessCount -> d
    int writeAbortCount -> e
    com.squareup.okhttp.internal.http.OkResponseCache okResponseCache -> a
    java.lang.String uriToKey(java.net.URI) -> a
    java.lang.String bytesToHexString(byte[]) -> a
    java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map) -> get
    java.net.CacheRequest put(java.net.URI,java.net.URLConnection) -> put
    void abortQuietly(com.squareup.okhttp.internal.DiskLruCache$Editor) -> a
    com.squareup.okhttp.internal.http.HttpEngine getHttpEngine(java.net.URLConnection) -> a
    java.io.InputStream newBodyInputStream(com.squareup.okhttp.internal.DiskLruCache$Snapshot) -> b
    int access$3(com.squareup.okhttp.HttpResponseCache) -> a
    void access$4(com.squareup.okhttp.HttpResponseCache,int) -> a
    int access$5(com.squareup.okhttp.HttpResponseCache) -> b
    void access$6(com.squareup.okhttp.HttpResponseCache,int) -> b
    java.io.InputStream access$7(com.squareup.okhttp.internal.DiskLruCache$Snapshot) -> a
com.squareup.okhttp.HttpResponseCache$2 -> com.a.a.f:
    com.squareup.okhttp.internal.DiskLruCache$Snapshot val$snapshot -> a
    void close() -> close
com.squareup.okhttp.HttpResponseCache$CacheRequestImpl -> com.a.a.g:
    com.squareup.okhttp.internal.DiskLruCache$Editor editor -> b
    java.io.OutputStream cacheOut -> c
    boolean done -> d
    java.io.OutputStream body -> e
    com.squareup.okhttp.HttpResponseCache this$0 -> a
    void abort() -> abort
    java.io.OutputStream getBody() -> getBody
    boolean access$0(com.squareup.okhttp.HttpResponseCache$CacheRequestImpl) -> a
    void access$1(com.squareup.okhttp.HttpResponseCache$CacheRequestImpl,boolean) -> a
    com.squareup.okhttp.HttpResponseCache access$2(com.squareup.okhttp.HttpResponseCache$CacheRequestImpl) -> b
com.squareup.okhttp.HttpResponseCache$CacheRequestImpl$1 -> com.a.a.h:
    com.squareup.okhttp.HttpResponseCache$CacheRequestImpl this$1 -> a
    com.squareup.okhttp.internal.DiskLruCache$Editor val$editor -> b
    void close() -> close
    void write(byte[],int,int) -> write
com.squareup.okhttp.HttpResponseCache$Entry -> com.a.a.i:
    java.lang.String uri -> a
    com.squareup.okhttp.internal.http.RawHeaders varyHeaders -> b
    java.lang.String requestMethod -> c
    com.squareup.okhttp.internal.http.RawHeaders responseHeaders -> d
    java.lang.String cipherSuite -> e
    java.security.cert.Certificate[] peerCertificates -> f
    java.security.cert.Certificate[] localCertificates -> g
    void writeTo(com.squareup.okhttp.internal.DiskLruCache$Editor) -> a
    boolean isHttps() -> a
    java.security.cert.Certificate[] readCertArray(com.squareup.okhttp.internal.StrictLineReader) -> a
    void writeCertArray(java.io.Writer,java.security.cert.Certificate[]) -> a
    boolean matches(java.net.URI,java.lang.String,java.util.Map) -> a
    com.squareup.okhttp.internal.http.RawHeaders access$0(com.squareup.okhttp.HttpResponseCache$Entry) -> a
    java.lang.String access$1(com.squareup.okhttp.HttpResponseCache$Entry) -> b
    java.security.cert.Certificate[] access$2(com.squareup.okhttp.HttpResponseCache$Entry) -> c
    java.security.cert.Certificate[] access$3(com.squareup.okhttp.HttpResponseCache$Entry) -> d
    boolean access$4(com.squareup.okhttp.HttpResponseCache$Entry) -> e
com.squareup.okhttp.HttpResponseCache$EntryCacheResponse -> com.a.a.j:
    com.squareup.okhttp.HttpResponseCache$Entry entry -> a
    com.squareup.okhttp.internal.DiskLruCache$Snapshot snapshot -> b
    java.io.InputStream in -> c
    java.util.Map getHeaders() -> getHeaders
    java.io.InputStream getBody() -> getBody
com.squareup.okhttp.HttpResponseCache$EntrySecureCacheResponse -> com.a.a.k:
    com.squareup.okhttp.HttpResponseCache$Entry entry -> a
    com.squareup.okhttp.internal.DiskLruCache$Snapshot snapshot -> b
    java.io.InputStream in -> c
    java.util.Map getHeaders() -> getHeaders
    java.io.InputStream getBody() -> getBody
    java.lang.String getCipherSuite() -> getCipherSuite
    java.util.List getServerCertificateChain() -> getServerCertificateChain
    java.security.Principal getPeerPrincipal() -> getPeerPrincipal
    java.util.List getLocalCertificateChain() -> getLocalCertificateChain
    java.security.Principal getLocalPrincipal() -> getLocalPrincipal
com.squareup.okhttp.OkHttpClient -> com.a.a.l:
    java.net.Proxy proxy -> a
    java.util.Set failedRoutes -> b
    java.net.ProxySelector proxySelector -> c
    java.net.CookieHandler cookieHandler -> d
    java.net.ResponseCache responseCache -> e
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> f
    javax.net.ssl.HostnameVerifier hostnameVerifier -> g
    com.squareup.okhttp.ConnectionPool connectionPool -> h
    boolean followProtocolRedirects -> i
    java.net.Proxy getProxy() -> a
    java.net.ProxySelector getProxySelector() -> b
    java.net.CookieHandler getCookieHandler() -> c
    com.squareup.okhttp.internal.http.OkResponseCache okResponseCache() -> h
    javax.net.ssl.SSLSocketFactory getSslSocketFactory() -> d
    javax.net.ssl.HostnameVerifier getHostnameVerifier() -> e
    com.squareup.okhttp.ConnectionPool getConnectionPool() -> f
    boolean getFollowProtocolRedirects() -> g
    java.net.HttpURLConnection open(java.net.URL) -> a
    com.squareup.okhttp.OkHttpClient copyWithDefaults() -> i
com.squareup.okhttp.ResponseSource -> com.a.a.m:
    com.squareup.okhttp.ResponseSource CACHE -> a
    com.squareup.okhttp.ResponseSource CONDITIONAL_CACHE -> b
    com.squareup.okhttp.ResponseSource NETWORK -> c
    com.squareup.okhttp.ResponseSource[] ENUM$VALUES -> d
    boolean requiresConnection() -> a
    com.squareup.okhttp.ResponseSource[] values() -> values
    com.squareup.okhttp.ResponseSource valueOf(java.lang.String) -> valueOf
com.squareup.okhttp.Route -> com.a.a.n:
    com.squareup.okhttp.Address address -> a
    java.net.Proxy proxy -> b
    java.net.InetSocketAddress inetSocketAddress -> c
    boolean modernTls -> d
    com.squareup.okhttp.Address getAddress() -> a
    java.net.Proxy getProxy() -> b
    com.squareup.okhttp.Route flipTlsMode() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.squareup.okhttp.TunnelRequest -> com.a.a.o:
    java.lang.String host -> a
    int port -> b
    java.lang.String userAgent -> c
    java.lang.String proxyAuthorization -> d
    com.squareup.okhttp.internal.http.RawHeaders getRequestHeaders() -> a
com.squareup.okhttp.internal.AbstractOutputStream -> com.a.a.a.a:
    boolean closed -> a
    void write(int) -> write
    void checkNotClosed() -> a
    boolean isClosed() -> b
com.squareup.okhttp.internal.Base64 -> com.a.a.a.b:
    byte[] MAP -> a
    byte[] decode(byte[]) -> a
    byte[] decode(byte[],int) -> a
    java.lang.String encode(byte[]) -> b
com.squareup.okhttp.internal.DiskLruCache -> com.a.a.a.c:
    java.util.regex.Pattern LEGAL_KEY_PATTERN -> a
    java.io.File directory -> c
    long maxSize -> d
    int valueCount -> e
    long size -> f
    java.io.Writer journalWriter -> g
    java.util.LinkedHashMap lruEntries -> h
    int redundantOpCount -> i
    long nextSequenceNumber -> j
    java.util.concurrent.ThreadPoolExecutor executorService -> b
    java.util.concurrent.Callable cleanupCallable -> k
    java.io.OutputStream NULL_OUTPUT_STREAM -> l
    void deleteIfExists(java.io.File) -> a
    com.squareup.okhttp.internal.DiskLruCache$Snapshot get(java.lang.String) -> a
    com.squareup.okhttp.internal.DiskLruCache$Editor edit(java.lang.String) -> b
    com.squareup.okhttp.internal.DiskLruCache$Editor edit(java.lang.String,long) -> a
    void completeEdit(com.squareup.okhttp.internal.DiskLruCache$Editor,boolean) -> a
    boolean journalRebuildRequired() -> b
    boolean remove(java.lang.String) -> c
    void checkNotClosed() -> c
    void close() -> close
    void trimToSize() -> d
    void validateKey(java.lang.String) -> d
    int access$7(com.squareup.okhttp.internal.DiskLruCache) -> a
    java.io.File access$8(com.squareup.okhttp.internal.DiskLruCache) -> b
    java.io.OutputStream access$9() -> a
    void access$10(com.squareup.okhttp.internal.DiskLruCache,com.squareup.okhttp.internal.DiskLruCache$Editor,boolean) -> a
com.squareup.okhttp.internal.DiskLruCache$2 -> com.a.a.a.d:
    void write(int) -> write
com.squareup.okhttp.internal.DiskLruCache$Editor -> com.a.a.a.e:
    com.squareup.okhttp.internal.DiskLruCache$Entry entry -> b
    boolean[] written -> c
    boolean hasErrors -> d
    boolean committed -> e
    com.squareup.okhttp.internal.DiskLruCache this$0 -> a
    java.io.OutputStream newOutputStream(int) -> a
    void commit() -> a
    void abort() -> b
    void access$0(com.squareup.okhttp.internal.DiskLruCache$Editor,boolean) -> a
    com.squareup.okhttp.internal.DiskLruCache$Entry access$2(com.squareup.okhttp.internal.DiskLruCache$Editor) -> a
    boolean[] access$3(com.squareup.okhttp.internal.DiskLruCache$Editor) -> b
com.squareup.okhttp.internal.DiskLruCache$Editor$FaultHidingOutputStream -> com.a.a.a.f:
    com.squareup.okhttp.internal.DiskLruCache$Editor this$1 -> a
    void write(int) -> write
    void write(byte[],int,int) -> write
    void close() -> close
    void flush() -> flush
com.squareup.okhttp.internal.DiskLruCache$Entry -> com.a.a.a.g:
    java.lang.String key -> b
    long[] lengths -> c
    boolean readable -> d
    com.squareup.okhttp.internal.DiskLruCache$Editor currentEditor -> e
    long sequenceNumber -> f
    com.squareup.okhttp.internal.DiskLruCache this$0 -> a
    java.lang.String getLengths() -> a
    java.io.File getCleanFile(int) -> a
    java.io.File getDirtyFile(int) -> b
    boolean access$0(com.squareup.okhttp.internal.DiskLruCache$Entry) -> a
    com.squareup.okhttp.internal.DiskLruCache$Editor access$1(com.squareup.okhttp.internal.DiskLruCache$Entry) -> b
    java.lang.String access$2(com.squareup.okhttp.internal.DiskLruCache$Entry) -> c
    void access$4(com.squareup.okhttp.internal.DiskLruCache$Entry,boolean) -> a
    void access$5(com.squareup.okhttp.internal.DiskLruCache$Entry,com.squareup.okhttp.internal.DiskLruCache$Editor) -> a
    long[] access$7(com.squareup.okhttp.internal.DiskLruCache$Entry) -> d
    long access$8(com.squareup.okhttp.internal.DiskLruCache$Entry) -> e
    void access$9(com.squareup.okhttp.internal.DiskLruCache$Entry,long) -> a
com.squareup.okhttp.internal.DiskLruCache$Snapshot -> com.a.a.a.h:
    java.lang.String key -> b
    long sequenceNumber -> c
    java.io.InputStream[] ins -> d
    long[] lengths -> e
    com.squareup.okhttp.internal.DiskLruCache this$0 -> a
    java.io.InputStream getInputStream(int) -> a
    void close() -> close
com.squareup.okhttp.internal.Dns -> com.a.a.a.i:
    com.squareup.okhttp.internal.Dns DEFAULT -> a
    java.net.InetAddress[] getAllByName(java.lang.String) -> a
com.squareup.okhttp.internal.Dns$1 -> com.a.a.a.j:
    java.net.InetAddress[] getAllByName(java.lang.String) -> a
com.squareup.okhttp.internal.FaultRecoveringOutputStream -> com.a.a.a.k:
    int maxReplayBufferLength -> b
    java.io.ByteArrayOutputStream replayBuffer -> c
    java.io.OutputStream out -> d
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
    boolean recover(java.io.IOException) -> b
    boolean isRecoverable() -> c
    void replaceStream(java.io.OutputStream) -> a
    java.io.OutputStream replacementStream(java.io.IOException) -> a
com.squareup.okhttp.internal.NamedRunnable -> com.a.a.a.l:
    java.lang.String name -> a
    void run() -> run
    void execute() -> a
com.squareup.okhttp.internal.Platform -> com.a.a.a.m:
    com.squareup.okhttp.internal.Platform PLATFORM -> a
    java.lang.reflect.Constructor deflaterConstructor -> b
    com.squareup.okhttp.internal.Platform get() -> a
    void logW(java.lang.String) -> a
    void tagSocket(java.net.Socket) -> a
    void untagSocket(java.net.Socket) -> b
    java.net.URI toUriLenient(java.net.URL) -> a
    void enableTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String) -> a
    void supportTlsIntolerantServer(javax.net.ssl.SSLSocket) -> a
    byte[] getNpnSelectedProtocol(javax.net.ssl.SSLSocket) -> b
    void setNpnProtocols(javax.net.ssl.SSLSocket,byte[]) -> a
    java.io.OutputStream newDeflaterOutputStream(java.io.OutputStream,java.util.zip.Deflater,boolean) -> a
    int getMtu(java.net.Socket) -> c
    com.squareup.okhttp.internal.Platform findPlatform() -> b
com.squareup.okhttp.internal.Platform$Android23 -> com.a.a.a.n:
    java.lang.Class openSslSocketClass -> a
    java.lang.reflect.Method setUseSessionTickets -> b
    java.lang.reflect.Method setHostname -> c
    void enableTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String) -> a
com.squareup.okhttp.internal.Platform$Android41 -> com.a.a.a.o:
    java.lang.reflect.Method setNpnProtocols -> b
    java.lang.reflect.Method getNpnSelectedProtocol -> c
    void setNpnProtocols(javax.net.ssl.SSLSocket,byte[]) -> a
    byte[] getNpnSelectedProtocol(javax.net.ssl.SSLSocket) -> b
com.squareup.okhttp.internal.Platform$Java5 -> com.a.a.a.p:
    java.lang.reflect.Method getMtu -> a
    int getMtu(java.net.Socket) -> c
com.squareup.okhttp.internal.Platform$JdkWithJettyNpnPlatform -> com.a.a.a.q:
    java.lang.reflect.Method getMethod -> a
    java.lang.reflect.Method putMethod -> b
    java.lang.Class clientProviderClass -> c
    java.lang.Class serverProviderClass -> d
    void setNpnProtocols(javax.net.ssl.SSLSocket,byte[]) -> a
    byte[] getNpnSelectedProtocol(javax.net.ssl.SSLSocket) -> b
com.squareup.okhttp.internal.Platform$JettyNpnProvider -> com.a.a.a.r:
    java.util.List protocols -> a
    boolean unsupported -> b
    java.lang.String selected -> c
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    boolean access$0(com.squareup.okhttp.internal.Platform$JettyNpnProvider) -> a
    java.lang.String access$1(com.squareup.okhttp.internal.Platform$JettyNpnProvider) -> b
com.squareup.okhttp.internal.StrictLineReader -> com.a.a.a.s:
    java.io.InputStream in -> a
    java.nio.charset.Charset charset -> b
    byte[] buf -> c
    int pos -> d
    int end -> e
    void close() -> close
    java.lang.String readLine() -> a
    int readInt() -> b
    void fillBuf() -> c
    java.nio.charset.Charset access$0(com.squareup.okhttp.internal.StrictLineReader) -> a
com.squareup.okhttp.internal.StrictLineReader$1 -> com.a.a.a.t:
    com.squareup.okhttp.internal.StrictLineReader this$0 -> a
    java.lang.String toString() -> toString
com.squareup.okhttp.internal.Util -> com.a.a.a.u:
    byte[] EMPTY_BYTE_ARRAY -> a
    java.lang.String[] EMPTY_STRING_ARRAY -> b
    java.nio.charset.Charset ISO_8859_1 -> c
    java.nio.charset.Charset US_ASCII -> d
    java.nio.charset.Charset UTF_8 -> e
    java.util.concurrent.atomic.AtomicReference skipBuffer -> f
    int getEffectivePort(java.net.URI) -> a
    int getEffectivePort(java.net.URL) -> a
    int getEffectivePort(java.lang.String,int) -> a
    int getDefaultPort(java.lang.String) -> a
    void checkOffsetAndCount(int,int,int) -> a
    void pokeInt(byte[],int,int,java.nio.ByteOrder) -> a
    boolean equal(java.lang.Object,java.lang.Object) -> a
    void closeQuietly(java.io.Closeable) -> a
    void closeAll(java.io.Closeable,java.io.Closeable) -> a
    int readSingleByte(java.io.InputStream) -> a
    void writeSingleByte(java.io.OutputStream,int) -> a
    void readFully(java.io.InputStream,byte[]) -> a
    void readFully(java.io.InputStream,byte[],int,int) -> a
    void skipAll(java.io.InputStream) -> b
    long skipByReading(java.io.InputStream,long) -> a
    java.lang.String readAsciiLine(java.io.InputStream) -> c
com.squareup.okhttp.internal.http.AbstractHttpInputStream -> com.a.a.a.a.a:
    java.io.InputStream in -> a
    com.squareup.okhttp.internal.http.HttpEngine httpEngine -> b
    java.net.CacheRequest cacheRequest -> d
    java.io.OutputStream cacheBody -> e
    boolean closed -> c
    int read() -> read
    void checkNotClosed() -> a
    void cacheWrite(byte[],int,int) -> a
    void endOfInput(boolean) -> a
    void unexpectedEndOfInput() -> b
com.squareup.okhttp.internal.http.HeaderParser -> com.a.a.a.a.b:
    void parseCacheControl(java.lang.String,com.squareup.okhttp.internal.http.HeaderParser$CacheControlHandler) -> a
    int skipUntil(java.lang.String,int,java.lang.String) -> a
    int skipWhitespace(java.lang.String,int) -> a
    int parseSeconds(java.lang.String) -> a
com.squareup.okhttp.internal.http.HeaderParser$CacheControlHandler -> com.a.a.a.a.c:
    void handle(java.lang.String,java.lang.String) -> a
com.squareup.okhttp.internal.http.HttpAuthenticator -> com.a.a.a.a.d:
    boolean processAuthHeader(int,com.squareup.okhttp.internal.http.RawHeaders,com.squareup.okhttp.internal.http.RawHeaders,java.net.Proxy,java.net.URL) -> a
    java.lang.String getCredentials(com.squareup.okhttp.internal.http.RawHeaders,java.lang.String,java.net.Proxy,java.net.URL) -> a
    java.net.InetAddress getConnectToInetAddress(java.net.Proxy,java.net.URL) -> a
    java.util.List parseChallenges(com.squareup.okhttp.internal.http.RawHeaders,java.lang.String) -> a
com.squareup.okhttp.internal.http.HttpAuthenticator$Challenge -> com.a.a.a.a.e:
    java.lang.String scheme -> a
    java.lang.String realm -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.squareup.okhttp.internal.http.HttpDate -> com.a.a.a.a.f:
    java.lang.ThreadLocal STANDARD_DATE_FORMAT -> a
    java.lang.String[] BROWSER_COMPATIBLE_DATE_FORMATS -> b
    java.util.Date parse(java.lang.String) -> a
    java.lang.String format(java.util.Date) -> a
com.squareup.okhttp.internal.http.HttpDate$1 -> com.a.a.a.a.g:
    java.text.DateFormat initialValue() -> a
    java.lang.Object initialValue() -> initialValue
com.squareup.okhttp.internal.http.HttpEngine -> com.a.a.a.a.h:
    java.net.CacheResponse GATEWAY_TIMEOUT_RESPONSE -> i
    com.squareup.okhttp.internal.http.HttpURLConnectionImpl policy -> a
    java.lang.String method -> b
    com.squareup.okhttp.ResponseSource responseSource -> j
    com.squareup.okhttp.Connection connection -> c
    com.squareup.okhttp.internal.http.RouteSelector routeSelector -> d
    java.io.OutputStream requestBodyOut -> k
    com.squareup.okhttp.internal.http.Transport transport -> l
    java.io.InputStream responseTransferIn -> m
    java.io.InputStream responseBodyIn -> n
    java.net.CacheResponse cacheResponse -> o
    java.net.CacheRequest cacheRequest -> p
    long sentRequestMillis -> e
    boolean transparentGzip -> q
    java.net.URI uri -> f
    com.squareup.okhttp.internal.http.RequestHeaders requestHeaders -> g
    com.squareup.okhttp.internal.http.ResponseHeaders responseHeaders -> h
    com.squareup.okhttp.internal.http.ResponseHeaders cachedResponseHeaders -> r
    java.io.InputStream cachedResponseBody -> s
    boolean automaticallyReleaseConnectionToPool -> t
    boolean connectionReleased -> u
    void sendRequest() -> a
    void initResponseSource() -> t
    void sendSocketRequest() -> u
    void connect() -> b
    void connected(com.squareup.okhttp.Connection) -> a
    void writingRequestHeaders() -> c
    void setResponse(com.squareup.okhttp.internal.http.ResponseHeaders,java.io.InputStream) -> a
    boolean hasRequestBody() -> d
    java.io.OutputStream getRequestBody() -> e
    boolean hasResponse() -> f
    com.squareup.okhttp.internal.http.RequestHeaders getRequestHeaders() -> g
    com.squareup.okhttp.internal.http.ResponseHeaders getResponseHeaders() -> h
    int getResponseCode() -> i
    java.io.InputStream getResponseBody() -> j
    java.net.CacheResponse getCacheResponse() -> k
    com.squareup.okhttp.Connection getConnection() -> l
    boolean acceptCacheResponseType(java.net.CacheResponse) -> a
    void maybeCache() -> v
    void automaticallyReleaseConnectionToPool() -> m
    void release(boolean) -> a
    void initContentStream(java.io.InputStream) -> a
    boolean hasResponseBody() -> n
    void prepareRawRequestHeaders() -> w
    java.lang.String getRequestLine() -> o
    java.lang.String requestString() -> x
    java.lang.String requestPath(java.net.URL) -> a
    boolean includeAuthorityInRequestLine() -> p
    java.lang.String getDefaultUserAgent() -> q
    java.lang.String getOriginAddress(java.net.URL) -> b
    void readResponse() -> r
    com.squareup.okhttp.TunnelRequest getTunnelConfig() -> s
    void receiveHeaders(com.squareup.okhttp.internal.http.RawHeaders) -> a
com.squareup.okhttp.internal.http.HttpEngine$1 -> com.a.a.a.a.i:
    java.util.Map getHeaders() -> getHeaders
    java.io.InputStream getBody() -> getBody
com.squareup.okhttp.internal.http.HttpTransport -> com.a.a.a.a.j:
    com.squareup.okhttp.internal.http.HttpEngine httpEngine -> a
    java.io.InputStream socketIn -> b
    java.io.OutputStream socketOut -> c
    java.io.OutputStream requestOut -> d
    java.io.OutputStream createRequestBody() -> a
    void flushRequest() -> b
    void writeRequestBody(com.squareup.okhttp.internal.http.RetryableOutputStream) -> a
    void writeRequestHeaders() -> c
    com.squareup.okhttp.internal.http.ResponseHeaders readResponseHeaders() -> d
    boolean makeReusable(boolean,java.io.OutputStream,java.io.InputStream) -> a
    boolean discardStream(com.squareup.okhttp.internal.http.HttpEngine,java.io.InputStream) -> b
    java.io.InputStream getTransferStream(java.net.CacheRequest) -> a
    boolean access$0(com.squareup.okhttp.internal.http.HttpEngine,java.io.InputStream) -> a
    com.squareup.okhttp.internal.http.HttpEngine access$1(com.squareup.okhttp.internal.http.HttpTransport) -> a
    java.io.InputStream access$2(com.squareup.okhttp.internal.http.HttpTransport) -> b
com.squareup.okhttp.internal.http.HttpTransport$ChunkedInputStream -> com.a.a.a.a.k:
    com.squareup.okhttp.internal.http.HttpTransport transport -> d
    int bytesRemainingInChunk -> e
    boolean hasMoreChunks -> f
    int read(byte[],int,int) -> read
    void readChunkSize() -> c
    int available() -> available
    void close() -> close
com.squareup.okhttp.internal.http.HttpTransport$ChunkedOutputStream -> com.a.a.a.a.l:
    byte[] CRLF -> b
    byte[] HEX_DIGITS -> c
    byte[] FINAL_CHUNK -> d
    byte[] hex -> e
    java.io.OutputStream socketOut -> f
    int maxChunkLength -> g
    java.io.ByteArrayOutputStream bufferedChunk -> h
    int dataLength(int) -> a
    void write(byte[],int,int) -> write
    void writeHex(int) -> b
    void flush() -> flush
    void close() -> close
    void writeBufferedChunkToSocket() -> c
com.squareup.okhttp.internal.http.HttpTransport$FixedLengthInputStream -> com.a.a.a.a.m:
    int bytesRemaining -> d
    int read(byte[],int,int) -> read
    int available() -> available
    void close() -> close
com.squareup.okhttp.internal.http.HttpTransport$FixedLengthOutputStream -> com.a.a.a.a.n:
    java.io.OutputStream socketOut -> b
    int bytesRemaining -> c
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.squareup.okhttp.internal.http.HttpURLConnectionImpl -> com.a.a.a.a.o:
    boolean followProtocolRedirects -> k
    java.net.Proxy requestedProxy -> a
    java.net.ProxySelector proxySelector -> b
    java.net.CookieHandler cookieHandler -> c
    com.squareup.okhttp.internal.http.OkResponseCache responseCache -> d
    com.squareup.okhttp.ConnectionPool connectionPool -> e
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> f
    javax.net.ssl.HostnameVerifier hostnameVerifier -> g
    java.util.Set failedRoutes -> h
    com.squareup.okhttp.internal.http.RawHeaders rawRequestHeaders -> l
    int redirectionCount -> m
    com.squareup.okhttp.internal.FaultRecoveringOutputStream faultRecoveringRequestBody -> n
    java.io.IOException httpEngineFailure -> i
    com.squareup.okhttp.internal.http.HttpEngine httpEngine -> j
    java.util.Set getFailedRoutes() -> a
    void connect() -> connect
    void disconnect() -> disconnect
    java.io.InputStream getErrorStream() -> getErrorStream
    java.lang.String getHeaderField(int) -> getHeaderField
    java.lang.String getHeaderField(java.lang.String) -> getHeaderField
    java.lang.String getHeaderFieldKey(int) -> getHeaderFieldKey
    java.util.Map getHeaderFields() -> getHeaderFields
    java.util.Map getRequestProperties() -> getRequestProperties
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.security.Permission getPermission() -> getPermission
    java.lang.String getRequestProperty(java.lang.String) -> getRequestProperty
    void initHttpEngine() -> f
    java.net.HttpURLConnection getHttpConnectionToCache() -> b
    com.squareup.okhttp.internal.http.HttpEngine newHttpEngine(java.lang.String,com.squareup.okhttp.internal.http.RawHeaders,com.squareup.okhttp.Connection,com.squareup.okhttp.internal.http.RetryableOutputStream) -> a
    com.squareup.okhttp.internal.http.HttpEngine getResponse() -> g
    boolean execute(boolean) -> a
    boolean handleFailure(java.io.IOException) -> a
    boolean isRecoverable(java.io.IOException) -> b
    com.squareup.okhttp.internal.http.HttpEngine getHttpEngine() -> c
    com.squareup.okhttp.internal.http.HttpURLConnectionImpl$Retry processResponseHeaders() -> h
    int getFixedContentLength() -> d
    int getChunkLength() -> e
    boolean usingProxy() -> usingProxy
    java.lang.String getResponseMessage() -> getResponseMessage
    int getResponseCode() -> getResponseCode
    void setRequestProperty(java.lang.String,java.lang.String) -> setRequestProperty
    void addRequestProperty(java.lang.String,java.lang.String) -> addRequestProperty
    boolean access$0(com.squareup.okhttp.internal.http.HttpURLConnectionImpl,java.io.IOException) -> a
com.squareup.okhttp.internal.http.HttpURLConnectionImpl$1 -> com.a.a.a.a.p:
    com.squareup.okhttp.internal.http.HttpURLConnectionImpl this$0 -> b
    java.io.OutputStream replacementStream(java.io.IOException) -> a
com.squareup.okhttp.internal.http.HttpURLConnectionImpl$Retry -> com.a.a.a.a.q:
    com.squareup.okhttp.internal.http.HttpURLConnectionImpl$Retry NONE -> a
    com.squareup.okhttp.internal.http.HttpURLConnectionImpl$Retry SAME_CONNECTION -> b
    com.squareup.okhttp.internal.http.HttpURLConnectionImpl$Retry DIFFERENT_CONNECTION -> c
    com.squareup.okhttp.internal.http.HttpURLConnectionImpl$Retry[] ENUM$VALUES -> d
    com.squareup.okhttp.internal.http.HttpURLConnectionImpl$Retry[] values() -> values
    com.squareup.okhttp.internal.http.HttpURLConnectionImpl$Retry valueOf(java.lang.String) -> valueOf
com.squareup.okhttp.internal.http.HttpsURLConnectionImpl -> com.a.a.a.a.r:
    com.squareup.okhttp.internal.http.HttpsURLConnectionImpl$HttpUrlConnectionDelegate delegate -> a
    java.lang.String getCipherSuite() -> getCipherSuite
    java.security.cert.Certificate[] getLocalCertificates() -> getLocalCertificates
    java.security.cert.Certificate[] getServerCertificates() -> getServerCertificates
    java.security.Principal getPeerPrincipal() -> getPeerPrincipal
    java.security.Principal getLocalPrincipal() -> getLocalPrincipal
    com.squareup.okhttp.internal.http.HttpEngine getHttpEngine() -> a
    javax.net.ssl.SSLSocket getSslSocket() -> b
    void disconnect() -> disconnect
    java.io.InputStream getErrorStream() -> getErrorStream
    java.lang.String getRequestMethod() -> getRequestMethod
    int getResponseCode() -> getResponseCode
    java.lang.String getResponseMessage() -> getResponseMessage
    void setRequestMethod(java.lang.String) -> setRequestMethod
    boolean usingProxy() -> usingProxy
    boolean getInstanceFollowRedirects() -> getInstanceFollowRedirects
    void setInstanceFollowRedirects(boolean) -> setInstanceFollowRedirects
    void connect() -> connect
    boolean getAllowUserInteraction() -> getAllowUserInteraction
    java.lang.Object getContent() -> getContent
    java.lang.Object getContent(java.lang.Class[]) -> getContent
    java.lang.String getContentEncoding() -> getContentEncoding
    int getContentLength() -> getContentLength
    java.lang.String getContentType() -> getContentType
    long getDate() -> getDate
    boolean getDefaultUseCaches() -> getDefaultUseCaches
    boolean getDoInput() -> getDoInput
    boolean getDoOutput() -> getDoOutput
    long getExpiration() -> getExpiration
    java.lang.String getHeaderField(int) -> getHeaderField
    java.util.Map getHeaderFields() -> getHeaderFields
    java.util.Map getRequestProperties() -> getRequestProperties
    void addRequestProperty(java.lang.String,java.lang.String) -> addRequestProperty
    java.lang.String getHeaderField(java.lang.String) -> getHeaderField
    long getHeaderFieldDate(java.lang.String,long) -> getHeaderFieldDate
    int getHeaderFieldInt(java.lang.String,int) -> getHeaderFieldInt
    java.lang.String getHeaderFieldKey(int) -> getHeaderFieldKey
    long getIfModifiedSince() -> getIfModifiedSince
    java.io.InputStream getInputStream() -> getInputStream
    long getLastModified() -> getLastModified
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.security.Permission getPermission() -> getPermission
    java.lang.String getRequestProperty(java.lang.String) -> getRequestProperty
    java.net.URL getURL() -> getURL
    boolean getUseCaches() -> getUseCaches
    void setAllowUserInteraction(boolean) -> setAllowUserInteraction
    void setDefaultUseCaches(boolean) -> setDefaultUseCaches
    void setDoInput(boolean) -> setDoInput
    void setDoOutput(boolean) -> setDoOutput
    void setIfModifiedSince(long) -> setIfModifiedSince
    void setRequestProperty(java.lang.String,java.lang.String) -> setRequestProperty
    void setUseCaches(boolean) -> setUseCaches
    void setConnectTimeout(int) -> setConnectTimeout
    int getConnectTimeout() -> getConnectTimeout
    void setReadTimeout(int) -> setReadTimeout
    int getReadTimeout() -> getReadTimeout
    java.lang.String toString() -> toString
    void setFixedLengthStreamingMode(int) -> setFixedLengthStreamingMode
    void setChunkedStreamingMode(int) -> setChunkedStreamingMode
    void setHostnameVerifier(javax.net.ssl.HostnameVerifier) -> setHostnameVerifier
    javax.net.ssl.HostnameVerifier getHostnameVerifier() -> getHostnameVerifier
    void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory) -> setSSLSocketFactory
    javax.net.ssl.SSLSocketFactory getSSLSocketFactory() -> getSSLSocketFactory
com.squareup.okhttp.internal.http.HttpsURLConnectionImpl$HttpUrlConnectionDelegate -> com.a.a.a.a.s:
    com.squareup.okhttp.internal.http.HttpsURLConnectionImpl this$0 -> k
    java.net.HttpURLConnection getHttpConnectionToCache() -> b
    java.net.SecureCacheResponse getSecureCacheResponse() -> f
com.squareup.okhttp.internal.http.HttpsURLConnectionImpl$HttpsEngine -> com.a.a.a.a.t:
    javax.net.ssl.SSLSocket sslSocket -> i
    void connected(com.squareup.okhttp.Connection) -> a
    boolean acceptCacheResponseType(java.net.CacheResponse) -> a
    boolean includeAuthorityInRequestLine() -> p
    com.squareup.okhttp.TunnelRequest getTunnelConfig() -> s
    javax.net.ssl.SSLSocket access$0(com.squareup.okhttp.internal.http.HttpsURLConnectionImpl$HttpsEngine) -> a
com.squareup.okhttp.internal.http.OkResponseCache -> com.a.a.a.a.u:
    java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map) -> a
    java.net.CacheRequest put(java.net.URI,java.net.URLConnection) -> a
    void update(java.net.CacheResponse,java.net.HttpURLConnection) -> a
    void trackConditionalCacheHit() -> a
    void trackResponse(com.squareup.okhttp.ResponseSource) -> a
com.squareup.okhttp.internal.http.OkResponseCacheAdapter -> com.a.a.a.a.v:
    java.net.ResponseCache responseCache -> a
    java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map) -> a
    java.net.CacheRequest put(java.net.URI,java.net.URLConnection) -> a
    void update(java.net.CacheResponse,java.net.HttpURLConnection) -> a
    void trackConditionalCacheHit() -> a
    void trackResponse(com.squareup.okhttp.ResponseSource) -> a
com.squareup.okhttp.internal.http.RawHeaders -> com.a.a.a.a.w:
    java.util.Comparator FIELD_NAME_COMPARATOR -> a
    java.util.List namesAndValues -> b
    java.lang.String requestLine -> c
    java.lang.String statusLine -> d
    int httpMinorVersion -> e
    int responseCode -> f
    java.lang.String responseMessage -> g
    void setRequestLine(java.lang.String) -> a
    void setStatusLine(java.lang.String) -> b
    void computeResponseStatusLineFromSpdyHeaders() -> a
    void addSpdyRequestHeaders(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String getStatusLine() -> b
    int getHttpMinorVersion() -> c
    int getResponseCode() -> d
    java.lang.String getResponseMessage() -> e
    void addLine(java.lang.String) -> c
    void add(java.lang.String,java.lang.String) -> a
    void addLenient(java.lang.String,java.lang.String) -> c
    void removeAll(java.lang.String) -> d
    void addAll(java.lang.String,java.util.List) -> a
    void set(java.lang.String,java.lang.String) -> b
    int length() -> f
    java.lang.String getFieldName(int) -> a
    java.lang.String getValue(int) -> b
    java.lang.String get(java.lang.String) -> e
    com.squareup.okhttp.internal.http.RawHeaders getAll(java.util.Set) -> a
    byte[] toBytes() -> g
    com.squareup.okhttp.internal.http.RawHeaders fromBytes(java.io.InputStream) -> a
    void readHeaders(java.io.InputStream,com.squareup.okhttp.internal.http.RawHeaders) -> a
    java.util.Map toMultimap(boolean) -> a
    com.squareup.okhttp.internal.http.RawHeaders fromMultimap(java.util.Map,boolean) -> a
    java.util.List toNameValueBlock() -> h
    com.squareup.okhttp.internal.http.RawHeaders fromNameValueBlock(java.util.List) -> a
com.squareup.okhttp.internal.http.RawHeaders$1 -> com.a.a.a.a.x:
    int compare(java.lang.String,java.lang.String) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.squareup.okhttp.internal.http.RequestHeaders -> com.a.a.a.a.y:
    java.net.URI uri -> a
    com.squareup.okhttp.internal.http.RawHeaders headers -> b
    boolean noCache -> c
    int maxAgeSeconds -> d
    int maxStaleSeconds -> e
    int minFreshSeconds -> f
    boolean onlyIfCached -> g
    boolean hasAuthorization -> h
    int contentLength -> i
    java.lang.String transferEncoding -> j
    java.lang.String userAgent -> k
    java.lang.String host -> l
    java.lang.String connection -> m
    java.lang.String acceptEncoding -> n
    java.lang.String contentType -> o
    java.lang.String ifModifiedSince -> p
    java.lang.String ifNoneMatch -> q
    java.lang.String proxyAuthorization -> r
    boolean isChunked() -> a
    boolean hasConnectionClose() -> b
    com.squareup.okhttp.internal.http.RawHeaders getHeaders() -> c
    boolean isNoCache() -> d
    int getMaxAgeSeconds() -> e
    int getMaxStaleSeconds() -> f
    int getMinFreshSeconds() -> g
    boolean isOnlyIfCached() -> h
    boolean hasAuthorization() -> i
    int getContentLength() -> j
    java.lang.String getUserAgent() -> k
    java.lang.String getHost() -> l
    java.lang.String getConnection() -> m
    java.lang.String getAcceptEncoding() -> n
    java.lang.String getContentType() -> o
    java.lang.String getProxyAuthorization() -> p
    void setChunked() -> q
    void setContentLength(int) -> a
    void setUserAgent(java.lang.String) -> a
    void setHost(java.lang.String) -> b
    void setConnection(java.lang.String) -> c
    void setAcceptEncoding(java.lang.String) -> d
    void setContentType(java.lang.String) -> e
    void setIfModifiedSince(java.util.Date) -> a
    void setIfNoneMatch(java.lang.String) -> f
    boolean hasConditions() -> r
    void addCookies(java.util.Map) -> a
    void access$0(com.squareup.okhttp.internal.http.RequestHeaders,boolean) -> a
    void access$1(com.squareup.okhttp.internal.http.RequestHeaders,int) -> a
    void access$2(com.squareup.okhttp.internal.http.RequestHeaders,int) -> b
    void access$3(com.squareup.okhttp.internal.http.RequestHeaders,int) -> c
    void access$4(com.squareup.okhttp.internal.http.RequestHeaders,boolean) -> b
com.squareup.okhttp.internal.http.RequestHeaders$1 -> com.a.a.a.a.z:
    com.squareup.okhttp.internal.http.RequestHeaders this$0 -> a
    void handle(java.lang.String,java.lang.String) -> a
com.squareup.okhttp.internal.http.ResponseHeaders -> com.a.a.a.a.aa:
    java.net.URI uri -> a
    com.squareup.okhttp.internal.http.RawHeaders headers -> b
    java.util.Date servedDate -> c
    java.util.Date lastModified -> d
    java.util.Date expires -> e
    long sentRequestMillis -> f
    long receivedResponseMillis -> g
    boolean noCache -> h
    boolean noStore -> i
    int maxAgeSeconds -> j
    int sMaxAgeSeconds -> k
    boolean isPublic -> l
    boolean mustRevalidate -> m
    java.lang.String etag -> n
    int ageSeconds -> o
    java.util.Set varyFields -> p
    java.lang.String contentEncoding -> q
    java.lang.String transferEncoding -> r
    int contentLength -> s
    java.lang.String connection -> t
    boolean isContentEncodingGzip() -> a
    void stripContentEncoding() -> b
    void stripContentLength() -> c
    boolean isChunked() -> d
    boolean hasConnectionClose() -> e
    com.squareup.okhttp.internal.http.RawHeaders getHeaders() -> f
    java.util.Set getVaryFields() -> g
    int getContentLength() -> h
    void setLocalTimestamps(long,long) -> a
    void setResponseSource(com.squareup.okhttp.ResponseSource) -> a
    long computeAge(long) -> a
    long computeFreshnessLifetime() -> j
    boolean isFreshnessLifetimeHeuristic() -> k
    boolean isCacheable(com.squareup.okhttp.internal.http.RequestHeaders) -> a
    boolean hasVaryAll() -> i
    boolean varyMatches(java.util.Map,java.util.Map) -> a
    com.squareup.okhttp.ResponseSource chooseResponseSource(long,com.squareup.okhttp.internal.http.RequestHeaders) -> a
    boolean validate(com.squareup.okhttp.internal.http.ResponseHeaders) -> a
    com.squareup.okhttp.internal.http.ResponseHeaders combine(com.squareup.okhttp.internal.http.ResponseHeaders) -> b
    boolean isEndToEnd(java.lang.String) -> a
    void access$0(com.squareup.okhttp.internal.http.ResponseHeaders,boolean) -> a
    void access$1(com.squareup.okhttp.internal.http.ResponseHeaders,boolean) -> b
    void access$2(com.squareup.okhttp.internal.http.ResponseHeaders,int) -> a
    void access$3(com.squareup.okhttp.internal.http.ResponseHeaders,int) -> b
    void access$4(com.squareup.okhttp.internal.http.ResponseHeaders,boolean) -> c
    void access$5(com.squareup.okhttp.internal.http.ResponseHeaders,boolean) -> d
com.squareup.okhttp.internal.http.ResponseHeaders$1 -> com.a.a.a.a.ab:
    com.squareup.okhttp.internal.http.ResponseHeaders this$0 -> a
    void handle(java.lang.String,java.lang.String) -> a
com.squareup.okhttp.internal.http.RetryableOutputStream -> com.a.a.a.a.ac:
    int limit -> b
    java.io.ByteArrayOutputStream content -> c
    void close() -> close
    void write(byte[],int,int) -> write
    int contentLength() -> c
    void writeToSocket(java.io.OutputStream) -> a
com.squareup.okhttp.internal.http.RouteSelector -> com.a.a.a.a.ad:
    com.squareup.okhttp.Address address -> a
    java.net.URI uri -> b
    java.net.ProxySelector proxySelector -> c
    com.squareup.okhttp.ConnectionPool pool -> d
    com.squareup.okhttp.internal.Dns dns -> e
    java.util.Set failedRoutes -> f
    java.net.Proxy lastProxy -> g
    java.net.InetSocketAddress lastInetSocketAddress -> h
    boolean hasNextProxy -> i
    java.net.Proxy userSpecifiedProxy -> j
    java.util.Iterator proxySelectorProxies -> k
    java.net.InetAddress[] socketAddresses -> l
    int nextSocketAddressIndex -> m
    int socketPort -> n
    int nextTlsMode -> o
    java.util.List postponedRoutes -> p
    boolean hasNext() -> a
    com.squareup.okhttp.Connection next() -> b
    void connectFailed(com.squareup.okhttp.Connection,java.io.IOException) -> a
    void resetNextProxy(java.net.URI,java.net.Proxy) -> a
    boolean hasNextProxy() -> c
    java.net.Proxy nextProxy() -> d
    void resetNextInetSocketAddress(java.net.Proxy) -> a
    boolean hasNextInetSocketAddress() -> e
    java.net.InetSocketAddress nextInetSocketAddress() -> f
    void resetNextTlsMode() -> g
    boolean hasNextTlsMode() -> h
    int nextTlsMode() -> i
    boolean hasNextPostponed() -> j
    com.squareup.okhttp.Route nextPostponed() -> k
com.squareup.okhttp.internal.http.SpdyTransport -> com.a.a.a.a.ae:
    com.squareup.okhttp.internal.http.HttpEngine httpEngine -> a
    com.squareup.okhttp.internal.spdy.SpdyConnection spdyConnection -> b
    com.squareup.okhttp.internal.spdy.SpdyStream stream -> c
    java.io.OutputStream createRequestBody() -> a
    void writeRequestHeaders() -> c
    void writeRequestBody(com.squareup.okhttp.internal.http.RetryableOutputStream) -> a
    void flushRequest() -> b
    com.squareup.okhttp.internal.http.ResponseHeaders readResponseHeaders() -> d
    java.io.InputStream getTransferStream(java.net.CacheRequest) -> a
    boolean makeReusable(boolean,java.io.OutputStream,java.io.InputStream) -> a
com.squareup.okhttp.internal.http.Transport -> com.a.a.a.a.af:
    java.io.OutputStream createRequestBody() -> a
    void writeRequestHeaders() -> c
    void writeRequestBody(com.squareup.okhttp.internal.http.RetryableOutputStream) -> a
    void flushRequest() -> b
    com.squareup.okhttp.internal.http.ResponseHeaders readResponseHeaders() -> d
    java.io.InputStream getTransferStream(java.net.CacheRequest) -> a
    boolean makeReusable(boolean,java.io.OutputStream,java.io.InputStream) -> a
com.squareup.okhttp.internal.http.UnknownLengthHttpInputStream -> com.a.a.a.a.ag:
    boolean inputExhausted -> d
    int read(byte[],int,int) -> read
    int available() -> available
    void close() -> close
com.squareup.okhttp.internal.spdy.IncomingStreamHandler -> com.a.a.a.b.a:
    com.squareup.okhttp.internal.spdy.IncomingStreamHandler REFUSE_INCOMING_STREAMS -> a
    void receive(com.squareup.okhttp.internal.spdy.SpdyStream) -> a
com.squareup.okhttp.internal.spdy.IncomingStreamHandler$1 -> com.a.a.a.b.b:
    void receive(com.squareup.okhttp.internal.spdy.SpdyStream) -> a
com.squareup.okhttp.internal.spdy.Ping -> com.a.a.a.b.c:
    java.util.concurrent.CountDownLatch latch -> a
    long sent -> b
    long received -> c
    void send() -> a
    void receive() -> b
    void cancel() -> c
com.squareup.okhttp.internal.spdy.Settings -> com.a.a.a.b.d:
    int set -> a
    int persistValue -> b
    int persisted -> c
    int[] values -> d
    void set(int,int,int) -> a
    boolean isSet(int) -> a
    int get(int) -> b
    int flags(int) -> c
    int getInitialWindowSize(int) -> d
    boolean persistValue(int) -> e
    boolean isPersisted(int) -> f
    void merge(com.squareup.okhttp.internal.spdy.Settings) -> a
com.squareup.okhttp.internal.spdy.SpdyConnection -> com.a.a.a.b.e:
    java.util.concurrent.ExecutorService executor -> d
    boolean client -> a
    com.squareup.okhttp.internal.spdy.IncomingStreamHandler handler -> e
    com.squareup.okhttp.internal.spdy.SpdyReader spdyReader -> f
    com.squareup.okhttp.internal.spdy.SpdyWriter spdyWriter -> g
    java.util.Map streams -> h
    java.lang.String hostName -> i
    int lastGoodStreamId -> j
    int nextStreamId -> k
    boolean shutdown -> l
    long idleStartTimeNs -> m
    java.util.Map pings -> n
    int nextPingId -> o
    com.squareup.okhttp.internal.spdy.Settings settings -> b
    boolean $assertionsDisabled -> c
    com.squareup.okhttp.internal.spdy.SpdyStream getStream(int) -> c
    com.squareup.okhttp.internal.spdy.SpdyStream removeStream(int) -> a
    void setIdle(boolean) -> a
    boolean isIdle() -> a
    long getIdleStartTimeNs() -> b
    com.squareup.okhttp.internal.spdy.SpdyStream newStream(java.util.List,boolean,boolean) -> a
    void writeFrame(byte[],int,int) -> a
    void writeSynResetLater(int,int) -> a
    void writeSynReset(int,int) -> b
    void writeWindowUpdateLater(int,int) -> c
    void writeWindowUpdate(int,int) -> d
    void writePingLater(int,com.squareup.okhttp.internal.spdy.Ping) -> a
    void writePing(int,com.squareup.okhttp.internal.spdy.Ping) -> b
    com.squareup.okhttp.internal.spdy.Ping removePing(int) -> d
    void flush() -> c
    void shutdown(int) -> b
    void close() -> close
    void close(int,int) -> e
    void access$1(com.squareup.okhttp.internal.spdy.SpdyConnection,int,int) -> a
    com.squareup.okhttp.internal.spdy.SpdyReader access$2(com.squareup.okhttp.internal.spdy.SpdyConnection) -> a
    com.squareup.okhttp.internal.spdy.SpdyStream access$3(com.squareup.okhttp.internal.spdy.SpdyConnection,int) -> a
    boolean access$4(com.squareup.okhttp.internal.spdy.SpdyConnection) -> b
    void access$5(com.squareup.okhttp.internal.spdy.SpdyConnection,int) -> b
    java.util.Map access$6(com.squareup.okhttp.internal.spdy.SpdyConnection) -> c
    java.util.concurrent.ExecutorService access$7() -> d
    java.lang.String access$8(com.squareup.okhttp.internal.spdy.SpdyConnection) -> d
    com.squareup.okhttp.internal.spdy.IncomingStreamHandler access$9(com.squareup.okhttp.internal.spdy.SpdyConnection) -> e
    void access$10(com.squareup.okhttp.internal.spdy.SpdyConnection,int,com.squareup.okhttp.internal.spdy.Ping) -> a
    com.squareup.okhttp.internal.spdy.Ping access$11(com.squareup.okhttp.internal.spdy.SpdyConnection,int) -> c
    void access$12(com.squareup.okhttp.internal.spdy.SpdyConnection,boolean) -> a
    void access$13(com.squareup.okhttp.internal.spdy.SpdyConnection,int,com.squareup.okhttp.internal.spdy.Ping) -> b
com.squareup.okhttp.internal.spdy.SpdyConnection$1 -> com.a.a.a.b.f:
    com.squareup.okhttp.internal.spdy.SpdyConnection this$0 -> a
    int val$streamId -> b
    int val$statusCode -> c
    void execute() -> a
com.squareup.okhttp.internal.spdy.SpdyConnection$2 -> com.a.a.a.b.g:
    com.squareup.okhttp.internal.spdy.SpdyConnection this$0 -> a
    int val$streamId -> b
    int val$deltaWindowSize -> c
    void execute() -> a
com.squareup.okhttp.internal.spdy.SpdyConnection$3 -> com.a.a.a.b.h:
    com.squareup.okhttp.internal.spdy.SpdyConnection this$0 -> a
    int val$streamId -> b
    com.squareup.okhttp.internal.spdy.Ping val$ping -> c
    void execute() -> a
com.squareup.okhttp.internal.spdy.SpdyConnection$Builder -> com.a.a.a.b.i:
    java.lang.String hostName -> b
    java.io.InputStream in -> c
    java.io.OutputStream out -> d
    com.squareup.okhttp.internal.spdy.IncomingStreamHandler handler -> e
    boolean client -> a
    com.squareup.okhttp.internal.spdy.SpdyConnection build() -> a
    com.squareup.okhttp.internal.spdy.IncomingStreamHandler access$0(com.squareup.okhttp.internal.spdy.SpdyConnection$Builder) -> a
    java.io.InputStream access$1(com.squareup.okhttp.internal.spdy.SpdyConnection$Builder) -> b
    java.io.OutputStream access$2(com.squareup.okhttp.internal.spdy.SpdyConnection$Builder) -> c
    java.lang.String access$3(com.squareup.okhttp.internal.spdy.SpdyConnection$Builder) -> d
com.squareup.okhttp.internal.spdy.SpdyConnection$Reader -> com.a.a.a.b.j:
    com.squareup.okhttp.internal.spdy.SpdyConnection this$0 -> a
    void run() -> run
    void data(int,int,java.io.InputStream,int) -> a
    void synStream(int,int,int,int,int,java.util.List) -> a
    void synReply(int,int,java.util.List) -> a
    void headers(int,int,java.util.List) -> b
    void rstStream(int,int,int) -> a
    void settings(int,com.squareup.okhttp.internal.spdy.Settings) -> a
    void noop() -> a
    void ping(int,int) -> a
    void goAway(int,int,int) -> b
    void windowUpdate(int,int,int) -> c
    com.squareup.okhttp.internal.spdy.SpdyConnection access$1(com.squareup.okhttp.internal.spdy.SpdyConnection$Reader) -> a
com.squareup.okhttp.internal.spdy.SpdyConnection$Reader$1 -> com.a.a.a.b.k:
    com.squareup.okhttp.internal.spdy.SpdyConnection$Reader this$1 -> a
    com.squareup.okhttp.internal.spdy.SpdyStream val$synStream -> b
    void execute() -> a
com.squareup.okhttp.internal.spdy.SpdyReader -> com.a.a.a.b.l:
    byte[] DICTIONARY -> a
    java.io.DataInputStream in -> b
    java.io.DataInputStream nameValueBlockIn -> c
    int compressedLimit -> d
    boolean nextFrame(com.squareup.okhttp.internal.spdy.SpdyReader$Handler) -> a
    void readSynStream(com.squareup.okhttp.internal.spdy.SpdyReader$Handler,int,int) -> a
    void readSynReply(com.squareup.okhttp.internal.spdy.SpdyReader$Handler,int,int) -> b
    void readRstStream(com.squareup.okhttp.internal.spdy.SpdyReader$Handler,int,int) -> c
    void readHeaders(com.squareup.okhttp.internal.spdy.SpdyReader$Handler,int,int) -> d
    void readWindowUpdate(com.squareup.okhttp.internal.spdy.SpdyReader$Handler,int,int) -> e
    java.io.DataInputStream newNameValueBlockStream() -> a
    java.util.List readNameValueBlock(int) -> a
    java.lang.String readString() -> b
    void readPing(com.squareup.okhttp.internal.spdy.SpdyReader$Handler,int,int) -> f
    void readGoAway(com.squareup.okhttp.internal.spdy.SpdyReader$Handler,int,int) -> g
    void readSettings(com.squareup.okhttp.internal.spdy.SpdyReader$Handler,int,int) -> h
    java.io.IOException ioException(java.lang.String,java.lang.Object[]) -> a
    void close() -> close
    int access$0(com.squareup.okhttp.internal.spdy.SpdyReader) -> a
    java.io.DataInputStream access$1(com.squareup.okhttp.internal.spdy.SpdyReader) -> b
    void access$2(com.squareup.okhttp.internal.spdy.SpdyReader,int) -> a
com.squareup.okhttp.internal.spdy.SpdyReader$1 -> com.a.a.a.b.m:
    com.squareup.okhttp.internal.spdy.SpdyReader this$0 -> a
    int read() -> read
    int read(byte[],int,int) -> read
    void close() -> close
com.squareup.okhttp.internal.spdy.SpdyReader$2 -> com.a.a.a.b.n:
    com.squareup.okhttp.internal.spdy.SpdyReader this$0 -> a
    int inflate(byte[],int,int) -> inflate
com.squareup.okhttp.internal.spdy.SpdyReader$Handler -> com.a.a.a.b.o:
    void data(int,int,java.io.InputStream,int) -> a
    void synStream(int,int,int,int,int,java.util.List) -> a
    void synReply(int,int,java.util.List) -> a
    void headers(int,int,java.util.List) -> b
    void rstStream(int,int,int) -> a
    void settings(int,com.squareup.okhttp.internal.spdy.Settings) -> a
    void noop() -> a
    void ping(int,int) -> a
    void goAway(int,int,int) -> b
    void windowUpdate(int,int,int) -> c
com.squareup.okhttp.internal.spdy.SpdyStream -> com.a.a.a.b.p:
    java.lang.String[] STATUS_CODE_NAMES -> b
    int id -> c
    com.squareup.okhttp.internal.spdy.SpdyConnection connection -> d
    int priority -> e
    int slot -> f
    long readTimeoutMillis -> g
    int writeWindowSize -> h
    java.util.List requestHeaders -> i
    java.util.List responseHeaders -> j
    com.squareup.okhttp.internal.spdy.SpdyStream$SpdyDataInputStream in -> k
    com.squareup.okhttp.internal.spdy.SpdyStream$SpdyDataOutputStream out -> l
    int rstStatusCode -> m
    boolean $assertionsDisabled -> a
    boolean isOpen() -> a
    boolean isLocallyInitiated() -> b
    java.util.List getResponseHeaders() -> c
    void setReadTimeout(long) -> a
    java.io.InputStream getInputStream() -> d
    java.io.OutputStream getOutputStream() -> e
    void close(int) -> a
    void closeLater(int) -> b
    boolean closeInternal(int) -> e
    void receiveReply(java.util.List) -> a
    void receiveHeaders(java.util.List) -> b
    void receiveData(java.io.InputStream,int) -> a
    void receiveFin() -> f
    void receiveRstStream(int) -> c
    void setSettings(com.squareup.okhttp.internal.spdy.Settings) -> b
    void receiveSettings(com.squareup.okhttp.internal.spdy.Settings) -> a
    void receiveWindowUpdate(int) -> d
    java.lang.String rstStatusString() -> g
    void cancelStreamIfNecessary() -> h
    com.squareup.okhttp.internal.spdy.SpdyConnection access$0(com.squareup.okhttp.internal.spdy.SpdyStream) -> a
    int access$1(com.squareup.okhttp.internal.spdy.SpdyStream) -> b
    long access$2(com.squareup.okhttp.internal.spdy.SpdyStream) -> c
    int access$3(com.squareup.okhttp.internal.spdy.SpdyStream) -> d
    void access$4(com.squareup.okhttp.internal.spdy.SpdyStream) -> e
    java.lang.String access$5(com.squareup.okhttp.internal.spdy.SpdyStream) -> f
    int access$6(com.squareup.okhttp.internal.spdy.SpdyStream) -> g
com.squareup.okhttp.internal.spdy.SpdyStream$SpdyDataInputStream -> com.a.a.a.b.q:
    byte[] buffer -> c
    int pos -> d
    int limit -> e
    boolean closed -> f
    boolean finished -> g
    int unacknowledgedBytes -> h
    com.squareup.okhttp.internal.spdy.SpdyStream this$0 -> a
    boolean $assertionsDisabled -> b
    int available() -> available
    int read() -> read
    int read(byte[],int,int) -> read
    void waitUntilReadable() -> a
    void receive(java.io.InputStream,int) -> a
    void close() -> close
    void checkNotClosed() -> b
    void access$1(com.squareup.okhttp.internal.spdy.SpdyStream$SpdyDataInputStream,boolean) -> a
    boolean access$2(com.squareup.okhttp.internal.spdy.SpdyStream$SpdyDataInputStream) -> a
    boolean access$3(com.squareup.okhttp.internal.spdy.SpdyStream$SpdyDataInputStream) -> b
com.squareup.okhttp.internal.spdy.SpdyStream$SpdyDataOutputStream -> com.a.a.a.b.r:
    byte[] buffer -> c
    int pos -> d
    boolean closed -> e
    boolean finished -> f
    int unacknowledgedBytes -> g
    com.squareup.okhttp.internal.spdy.SpdyStream this$0 -> a
    boolean $assertionsDisabled -> b
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
    void writeFrame(boolean) -> a
    void waitUntilWritable(int,boolean) -> a
    void checkNotClosed() -> a
    void access$1(com.squareup.okhttp.internal.spdy.SpdyStream$SpdyDataOutputStream,boolean) -> a
    boolean access$2(com.squareup.okhttp.internal.spdy.SpdyStream$SpdyDataOutputStream) -> a
    boolean access$3(com.squareup.okhttp.internal.spdy.SpdyStream$SpdyDataOutputStream) -> b
    int access$4(com.squareup.okhttp.internal.spdy.SpdyStream$SpdyDataOutputStream) -> c
    void access$5(com.squareup.okhttp.internal.spdy.SpdyStream$SpdyDataOutputStream,int) -> a
com.squareup.okhttp.internal.spdy.SpdyWriter -> com.a.a.a.b.s:
    java.io.DataOutputStream out -> a
    java.io.ByteArrayOutputStream nameValueBlockBuffer -> b
    java.io.DataOutputStream nameValueBlockOut -> c
    void synStream(int,int,int,int,int,java.util.List) -> a
    void rstStream(int,int) -> a
    void writeNameValueBlockToBuffer(java.util.List) -> a
    void ping(int,int) -> b
    void goAway(int,int,int) -> a
    void windowUpdate(int,int) -> c
    void close() -> close
com.unfoldingword.androidapp.UnfoldingWord -> com.unfoldingword.androidapp.UnfoldingWord:
    void onCreate(android.os.Bundle) -> onCreate
org.apache.cordova.AuthenticationToken -> a.a.a.a:
    java.lang.String userName -> a
    java.lang.String password -> b
    java.lang.String getUserName() -> a
    java.lang.String getPassword() -> b
org.apache.cordova.CallbackContext -> a.a.a.b:
    java.lang.String callbackId -> a
    org.apache.cordova.CordovaWebView webView -> b
org.apache.cordova.Config -> a.a.a.c:
    org.apache.cordova.Whitelist whitelist -> a
    java.lang.String startUrl -> b
    org.apache.cordova.Config self -> c
    void init(android.app.Activity) -> a
    boolean isUrlWhiteListed(java.lang.String) -> a
    java.lang.String getStartUrl() -> a
org.apache.cordova.CordovaActivity -> a.a.a.d:
    java.lang.String TAG -> a
    org.apache.cordova.CordovaWebView appView -> b
    android.widget.LinearLayout root -> c
    boolean cancelLoadUrl -> d
    android.app.ProgressDialog spinnerDialog -> e
    java.util.concurrent.ExecutorService threadPool -> m
    int ACTIVITY_STARTING -> n
    int ACTIVITY_RUNNING -> o
    int ACTIVITY_EXITING -> p
    int activityState -> q
    org.apache.cordova.CordovaPlugin activityResultCallback -> f
    boolean activityResultKeepRunning -> g
    int backgroundColor -> r
    int splashscreen -> h
    int splashscreenTime -> i
    int loadUrlTimeoutValue -> j
    boolean keepRunning -> k
    java.lang.String initCallbackClass -> s
    android.app.Dialog splashDialog -> l
    void onCreate(android.os.Bundle) -> onCreate
    android.app.Activity getActivity() -> a
    org.apache.cordova.CordovaWebView makeWebView() -> b
    org.apache.cordova.CordovaWebViewClient makeWebViewClient(org.apache.cordova.CordovaWebView) -> a
    org.apache.cordova.CordovaChromeClient makeChromeClient(org.apache.cordova.CordovaWebView) -> b
    void init() -> c
    void init(org.apache.cordova.CordovaWebView,org.apache.cordova.CordovaWebViewClient,org.apache.cordova.CordovaChromeClient) -> a
    void loadUrl(java.lang.String) -> a
    void loadSpinner() -> d
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    boolean getBooleanProperty(java.lang.String,boolean) -> a
    int getIntegerProperty(java.lang.String,int) -> a
    java.lang.String getStringProperty(java.lang.String,java.lang.String) -> a
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void postMessage(java.lang.String,java.lang.Object) -> a
    void spinnerStart(java.lang.String,java.lang.String) -> b
    void spinnerStop() -> e
    void endActivity() -> f
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onReceivedError(int,java.lang.String,java.lang.String) -> a
    void displayError(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void removeSplashScreen() -> g
    void showSplashScreen(int) -> a
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    java.lang.Object onMessage(java.lang.String,java.lang.Object) -> b
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
org.apache.cordova.CordovaActivity$1 -> a.a.a.e:
    org.apache.cordova.CordovaActivity this$0 -> a
    org.apache.cordova.CordovaActivity val$me -> b
    void onCancel(android.content.DialogInterface) -> onCancel
org.apache.cordova.CordovaActivity$2 -> a.a.a.f:
    org.apache.cordova.CordovaActivity this$0 -> a
    org.apache.cordova.CordovaActivity val$me -> b
    java.lang.String val$errorUrl -> c
    void run() -> run
org.apache.cordova.CordovaActivity$3 -> a.a.a.g:
    org.apache.cordova.CordovaActivity this$0 -> a
    boolean val$exit -> b
    org.apache.cordova.CordovaActivity val$me -> c
    java.lang.String val$description -> d
    java.lang.String val$failingUrl -> e
    void run() -> run
org.apache.cordova.CordovaActivity$4 -> a.a.a.h:
    org.apache.cordova.CordovaActivity this$0 -> a
    org.apache.cordova.CordovaActivity val$me -> b
    java.lang.String val$message -> c
    java.lang.String val$title -> d
    java.lang.String val$button -> e
    boolean val$exit -> f
    void run() -> run
org.apache.cordova.CordovaActivity$4$1 -> a.a.a.i:
    org.apache.cordova.CordovaActivity$4 this$1 -> a
    boolean val$exit -> b
    org.apache.cordova.CordovaActivity val$me -> c
    void onClick(android.content.DialogInterface,int) -> onClick
org.apache.cordova.CordovaActivity$5 -> a.a.a.j:
    org.apache.cordova.CordovaActivity this$0 -> a
    org.apache.cordova.CordovaActivity val$that -> b
    int val$time -> c
    void run() -> run
    org.apache.cordova.CordovaActivity access$0(org.apache.cordova.CordovaActivity$5) -> a
org.apache.cordova.CordovaActivity$5$1 -> a.a.a.k:
    org.apache.cordova.CordovaActivity$5 this$1 -> a
    void run() -> run
org.apache.cordova.CordovaArgs -> a.a.a.l:
    org.json.JSONArray baseArgs -> a
org.apache.cordova.CordovaChromeClient -> a.a.a.m:
    java.lang.String TAG -> d
    long MAX_QUOTA -> e
    org.apache.cordova.CordovaInterface cordova -> a
    org.apache.cordova.CordovaWebView appView -> b
    android.view.View mVideoProgressView -> f
    android.webkit.ValueCallback mUploadMessage -> c
    void setWebView(org.apache.cordova.CordovaWebView) -> a
    boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult) -> onJsAlert
    boolean onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult) -> onJsConfirm
    boolean onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult) -> onJsPrompt
    void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater) -> onExceededDatabaseQuota
    void onConsoleMessage(java.lang.String,int,java.lang.String) -> onConsoleMessage
    boolean onConsoleMessage(android.webkit.ConsoleMessage) -> onConsoleMessage
    void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions$Callback) -> onGeolocationPermissionsShowPrompt
    void onShowCustomView(android.view.View,android.webkit.WebChromeClient$CustomViewCallback) -> onShowCustomView
    void onHideCustomView() -> onHideCustomView
    android.view.View getVideoLoadingProgressView() -> getVideoLoadingProgressView
    android.webkit.ValueCallback getValueCallback() -> a
org.apache.cordova.CordovaChromeClient$1 -> a.a.a.n:
    org.apache.cordova.CordovaChromeClient this$0 -> a
    android.webkit.JsResult val$result -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.apache.cordova.CordovaChromeClient$2 -> a.a.a.o:
    org.apache.cordova.CordovaChromeClient this$0 -> a
    android.webkit.JsResult val$result -> b
    void onCancel(android.content.DialogInterface) -> onCancel
org.apache.cordova.CordovaChromeClient$3 -> a.a.a.p:
    org.apache.cordova.CordovaChromeClient this$0 -> a
    android.webkit.JsResult val$result -> b
    boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent) -> onKey
org.apache.cordova.CordovaChromeClient$4 -> a.a.a.q:
    org.apache.cordova.CordovaChromeClient this$0 -> a
    android.webkit.JsResult val$result -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.apache.cordova.CordovaChromeClient$5 -> a.a.a.r:
    org.apache.cordova.CordovaChromeClient this$0 -> a
    android.webkit.JsResult val$result -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.apache.cordova.CordovaChromeClient$6 -> a.a.a.s:
    org.apache.cordova.CordovaChromeClient this$0 -> a
    android.webkit.JsResult val$result -> b
    void onCancel(android.content.DialogInterface) -> onCancel
org.apache.cordova.CordovaChromeClient$7 -> a.a.a.t:
    org.apache.cordova.CordovaChromeClient this$0 -> a
    android.webkit.JsResult val$result -> b
    boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent) -> onKey
org.apache.cordova.CordovaChromeClient$8 -> a.a.a.u:
    org.apache.cordova.CordovaChromeClient this$0 -> a
    android.widget.EditText val$input -> b
    android.webkit.JsPromptResult val$res -> c
    void onClick(android.content.DialogInterface,int) -> onClick
org.apache.cordova.CordovaChromeClient$9 -> a.a.a.v:
    org.apache.cordova.CordovaChromeClient this$0 -> a
    android.webkit.JsPromptResult val$res -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.apache.cordova.CordovaInterface -> a.a.a.w:
    android.app.Activity getActivity() -> a
    java.lang.Object onMessage(java.lang.String,java.lang.Object) -> b
org.apache.cordova.CordovaPlugin -> a.a.a.x:
    org.apache.cordova.CordovaWebView webView -> a
    org.apache.cordova.CordovaInterface cordova -> b
    boolean $assertionsDisabled -> c
    void initialize(org.apache.cordova.CordovaInterface,org.apache.cordova.CordovaWebView) -> a
    boolean execute(java.lang.String,java.lang.String,org.apache.cordova.CallbackContext) -> a
    boolean execute(java.lang.String,org.json.JSONArray,org.apache.cordova.CallbackContext) -> a
    boolean execute(java.lang.String,org.apache.cordova.CordovaArgs,org.apache.cordova.CallbackContext) -> a
    void onPause(boolean) -> a
    void onResume(boolean) -> b
    void onNewIntent(android.content.Intent) -> a
    void onDestroy() -> a
    java.lang.Object onMessage(java.lang.String,java.lang.Object) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    boolean onOverrideUrlLoading(java.lang.String) -> a
    android.net.Uri remapUri(android.net.Uri) -> a
    void onReset() -> b
org.apache.cordova.CordovaResourceApi -> a.a.a.y:
    java.lang.String[] LOCAL_FILE_PROJECTION -> b
    com.squareup.okhttp.OkHttpClient httpClient -> c
    java.lang.Thread jsThread -> a
    android.content.res.AssetManager assetManager -> d
    android.content.ContentResolver contentResolver -> e
    org.apache.cordova.PluginManager pluginManager -> f
    boolean threadCheckingEnabled -> g
    int getUriType(android.net.Uri) -> a
    android.net.Uri remapUri(android.net.Uri) -> b
    java.lang.String getMimeTypeFromPath(java.lang.String) -> a
    org.apache.cordova.CordovaResourceApi$OpenForReadResult openForRead(android.net.Uri,boolean) -> a
    void assertBackgroundThread() -> a
    org.apache.cordova.CordovaResourceApi$OpenForReadResult readDataUri(android.net.Uri) -> c
    void assertNonRelative(android.net.Uri) -> d
org.apache.cordova.CordovaResourceApi$OpenForReadResult -> a.a.a.z:
    android.net.Uri uri -> a
    java.io.InputStream inputStream -> b
    java.lang.String mimeType -> c
    long length -> d
    android.content.res.AssetFileDescriptor assetFd -> e
org.apache.cordova.CordovaWebView -> a.a.a.aa:
    java.util.ArrayList keyDownCodes -> g
    java.util.ArrayList keyUpCodes -> h
    org.apache.cordova.PluginManager pluginManager -> a
    boolean paused -> i
    android.content.BroadcastReceiver receiver -> j
    org.apache.cordova.CordovaInterface cordova -> k
    org.apache.cordova.CordovaWebViewClient viewClient -> b
    org.apache.cordova.CordovaChromeClient chromeClient -> l
    java.lang.String url -> m
    int loadUrlTimeout -> c
    boolean bound -> n
    boolean handleButton -> o
    long lastMenuEventTime -> p
    org.apache.cordova.NativeToJsMessageQueue jsMessageQueue -> d
    org.apache.cordova.ExposedJsApi exposedJsApi -> e
    android.view.View mCustomView -> q
    android.webkit.WebChromeClient$CustomViewCallback mCustomViewCallback -> r
    org.apache.cordova.CordovaWebView$ActivityResult mResult -> s
    org.apache.cordova.CordovaResourceApi resourceApi -> t
    android.widget.FrameLayout$LayoutParams COVER_SCREEN_GRAVITY_CENTER -> f
    void setup() -> h
    boolean shouldRequestFocusOnInit() -> a
    void updateUserAgentString() -> i
    void exposeJsInterface() -> j
    void setWebViewClient(org.apache.cordova.CordovaWebViewClient) -> setWebViewClient
    void setWebChromeClient(org.apache.cordova.CordovaChromeClient) -> setWebChromeClient
    org.apache.cordova.CordovaChromeClient getWebChromeClient() -> getWebChromeClient
    void loadUrl(java.lang.String) -> loadUrl
    void loadUrl(java.lang.String,int) -> a
    void loadUrlIntoView(java.lang.String) -> a
    void loadUrlNow(java.lang.String) -> b
    void loadUrlIntoView(java.lang.String,int) -> b
    void onScrollChanged(int,int,int,int) -> onScrollChanged
    void sendJavascript(java.lang.String) -> c
    void sendPluginResult(org.apache.cordova.PluginResult,java.lang.String) -> a
    void postMessage(java.lang.String,java.lang.Object) -> a
    boolean backHistory() -> b
    void showWebPage(java.lang.String,boolean,boolean,java.util.HashMap) -> a
    void loadConfiguration() -> k
    java.lang.String getProperty(java.lang.String,java.lang.String) -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void handlePause(boolean) -> a
    void handleResume(boolean,boolean) -> a
    void handleDestroy() -> c
    void onNewIntent(android.content.Intent) -> a
    void printBackForwardList() -> d
    boolean startOfHistory() -> e
    void showCustomView(android.view.View,android.webkit.WebChromeClient$CustomViewCallback) -> a
    void hideCustomView() -> f
    boolean isCustomViewShowing() -> g
    android.webkit.WebBackForwardList restoreState(android.os.Bundle) -> restoreState
    org.apache.cordova.CordovaResourceApi getResourceApi() -> getResourceApi
    void access$0(org.apache.cordova.CordovaWebView) -> a
    org.apache.cordova.CordovaInterface access$1(org.apache.cordova.CordovaWebView) -> b
org.apache.cordova.CordovaWebView$1 -> a.a.a.ab:
    org.apache.cordova.CordovaWebView this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.apache.cordova.CordovaWebView$2 -> a.a.a.ac:
    org.apache.cordova.CordovaWebView this$0 -> a
    org.apache.cordova.CordovaWebView val$me -> b
    java.lang.String val$url -> c
    void run() -> run
org.apache.cordova.CordovaWebView$3 -> a.a.a.ad:
    org.apache.cordova.CordovaWebView this$0 -> a
    int val$loadUrlTimeoutValue -> b
    org.apache.cordova.CordovaWebView val$me -> c
    int val$currentLoadUrlTimeout -> d
    java.lang.Runnable val$loadError -> e
    void run() -> run
org.apache.cordova.CordovaWebView$4 -> a.a.a.ae:
    org.apache.cordova.CordovaWebView this$0 -> a
    java.lang.Runnable val$timeoutCheck -> b
    org.apache.cordova.CordovaWebView val$me -> c
    java.lang.String val$url -> d
    void run() -> run
org.apache.cordova.CordovaWebView$ActivityResult -> a.a.a.af:
org.apache.cordova.CordovaWebView$Level16Apis -> a.a.a.ag:
    void enableUniversalAccess(android.webkit.WebSettings) -> a
org.apache.cordova.CordovaWebViewClient -> a.a.a.ah:
    org.apache.cordova.CordovaInterface cordova -> a
    org.apache.cordova.CordovaWebView appView -> b
    boolean doClearHistory -> c
    java.util.Hashtable authenticationTokens -> d
    void setWebView(org.apache.cordova.CordovaWebView) -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String) -> onReceivedHttpAuthRequest
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
    void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError) -> onReceivedSslError
    org.apache.cordova.AuthenticationToken getAuthenticationToken(java.lang.String,java.lang.String) -> a
org.apache.cordova.CordovaWebViewClient$1 -> a.a.a.ai:
    org.apache.cordova.CordovaWebViewClient this$0 -> a
    void run() -> run
    org.apache.cordova.CordovaWebViewClient access$0(org.apache.cordova.CordovaWebViewClient$1) -> a
org.apache.cordova.CordovaWebViewClient$1$1 -> a.a.a.aj:
    org.apache.cordova.CordovaWebViewClient$1 this$1 -> a
    void run() -> run
org.apache.cordova.ExposedJsApi -> a.a.a.ak:
    org.apache.cordova.PluginManager pluginManager -> a
    org.apache.cordova.NativeToJsMessageQueue jsMessageQueue -> b
    java.lang.String exec(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void setNativeToJsBridgeMode(int) -> a
    java.lang.String retrieveJsMessages(boolean) -> a
org.apache.cordova.IceCreamCordovaWebViewClient -> a.a.a.al:
    android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,java.lang.String) -> shouldInterceptRequest
    boolean needsSpecialsInAssetUrlFix(android.net.Uri) -> a
org.apache.cordova.LOG -> a.a.a.am:
    int LOGLEVEL -> a
    void setLogLevel(java.lang.String) -> a
    boolean isLoggable(int) -> a
    void v(java.lang.String,java.lang.String) -> a
    void d(java.lang.String,java.lang.String) -> b
    void i(java.lang.String,java.lang.String) -> c
    void w(java.lang.String,java.lang.String) -> d
    void e(java.lang.String,java.lang.String) -> e
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void v(java.lang.String,java.lang.String,java.lang.Object[]) -> a
    void d(java.lang.String,java.lang.String,java.lang.Object[]) -> b
    void i(java.lang.String,java.lang.String,java.lang.Object[]) -> c
org.apache.cordova.LinearLayoutSoftKeyboardDetect -> a.a.a.an:
    int oldHeight -> a
    int oldWidth -> b
    int screenWidth -> c
    int screenHeight -> d
    org.apache.cordova.CordovaActivity app -> e
    void onMeasure(int,int) -> onMeasure
org.apache.cordova.NativeToJsMessageQueue -> a.a.a.ao:
    int MAX_PAYLOAD_SIZE -> a
    int activeListenerIndex -> b
    boolean paused -> c
    java.util.LinkedList queue -> d
    org.apache.cordova.NativeToJsMessageQueue$BridgeMode[] registeredListeners -> e
    org.apache.cordova.CordovaInterface cordova -> f
    org.apache.cordova.CordovaWebView webView -> g
    void setBridgeMode(int) -> a
    void reset() -> a
    int calculatePackedMessageLength(org.apache.cordova.NativeToJsMessageQueue$JsMessage) -> a
    void packMessage(org.apache.cordova.NativeToJsMessageQueue$JsMessage,java.lang.StringBuilder) -> a
    java.lang.String popAndEncode(boolean) -> a
    java.lang.String popAndEncodeAsJs() -> b
    void addJavaScript(java.lang.String) -> a
    void addPluginResult(org.apache.cordova.PluginResult,java.lang.String) -> a
    void enqueueMessage(org.apache.cordova.NativeToJsMessageQueue$JsMessage) -> b
    void setPaused(boolean) -> b
    java.lang.String access$0(org.apache.cordova.NativeToJsMessageQueue) -> a
    org.apache.cordova.CordovaWebView access$1(org.apache.cordova.NativeToJsMessageQueue) -> b
    org.apache.cordova.CordovaInterface access$2(org.apache.cordova.NativeToJsMessageQueue) -> c
    java.util.LinkedList access$3(org.apache.cordova.NativeToJsMessageQueue) -> d
org.apache.cordova.NativeToJsMessageQueue$BridgeMode -> a.a.a.ap:
    org.apache.cordova.NativeToJsMessageQueue this$0 -> a
    void onNativeToJsMessageAvailable() -> a
    void notifyOfFlush(boolean) -> a
org.apache.cordova.NativeToJsMessageQueue$JsMessage -> a.a.a.aq:
    java.lang.String jsPayloadOrCallbackId -> a
    org.apache.cordova.PluginResult pluginResult -> b
    int calculateEncodedLength() -> a
    void encodeAsMessage(java.lang.StringBuilder) -> a
    void encodeAsJsMessage(java.lang.StringBuilder) -> b
org.apache.cordova.NativeToJsMessageQueue$LoadUrlBridgeMode -> a.a.a.ar:
    java.lang.Runnable runnable -> b
    org.apache.cordova.NativeToJsMessageQueue this$0 -> c
    void onNativeToJsMessageAvailable() -> a
    org.apache.cordova.NativeToJsMessageQueue access$1(org.apache.cordova.NativeToJsMessageQueue$LoadUrlBridgeMode) -> a
org.apache.cordova.NativeToJsMessageQueue$LoadUrlBridgeMode$1 -> a.a.a.as:
    org.apache.cordova.NativeToJsMessageQueue$LoadUrlBridgeMode this$1 -> a
    void run() -> run
org.apache.cordova.NativeToJsMessageQueue$OnlineEventsBridgeMode -> a.a.a.at:
    boolean online -> b
    java.lang.Runnable runnable -> c
    org.apache.cordova.NativeToJsMessageQueue this$0 -> d
    void onNativeToJsMessageAvailable() -> a
    void notifyOfFlush(boolean) -> a
    org.apache.cordova.NativeToJsMessageQueue access$0(org.apache.cordova.NativeToJsMessageQueue$OnlineEventsBridgeMode) -> a
org.apache.cordova.NativeToJsMessageQueue$OnlineEventsBridgeMode$1 -> a.a.a.au:
    org.apache.cordova.NativeToJsMessageQueue$OnlineEventsBridgeMode this$1 -> a
    void run() -> run
org.apache.cordova.NativeToJsMessageQueue$PrivateApiBridgeMode -> a.a.a.av:
    java.lang.reflect.Method sendMessageMethod -> b
    java.lang.Object webViewCore -> c
    boolean initFailed -> d
    org.apache.cordova.NativeToJsMessageQueue this$0 -> e
    void initReflection() -> b
    void onNativeToJsMessageAvailable() -> a
org.apache.cordova.PluginEntry -> a.a.a.aw:
    java.lang.String service -> a
    java.lang.String pluginClass -> b
    org.apache.cordova.CordovaPlugin plugin -> c
    boolean onload -> d
    org.apache.cordova.CordovaPlugin createPlugin(org.apache.cordova.CordovaWebView,org.apache.cordova.CordovaInterface) -> a
    java.lang.Class getClassByName(java.lang.String) -> a
    boolean isCordovaPlugin(java.lang.Class) -> a
org.apache.cordova.PluginManager -> a.a.a.ax:
    java.lang.String TAG -> b
    int SLOW_EXEC_WARNING_THRESHOLD -> c
    java.util.HashMap entries -> d
    org.apache.cordova.CordovaInterface ctx -> e
    org.apache.cordova.CordovaWebView app -> f
    boolean firstRun -> g
    java.util.HashMap urlMap -> a
    java.util.concurrent.atomic.AtomicInteger numPendingUiExecs -> h
    void init() -> a
    void loadPlugins() -> b
    void clearPluginObjects() -> c
    void startupPlugins() -> d
    void exec(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void execHelper(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> b
    org.apache.cordova.CordovaPlugin getPlugin(java.lang.String) -> a
    void addService(org.apache.cordova.PluginEntry) -> a
    void onPause(boolean) -> a
    void onResume(boolean) -> b
    void onDestroy() -> e
    java.lang.Object postMessage(java.lang.String,java.lang.Object) -> a
    void onNewIntent(android.content.Intent) -> a
    boolean onOverrideUrlLoading(java.lang.String) -> b
    void onReset() -> f
    void pluginConfigurationMissing() -> g
    android.net.Uri remapUri(android.net.Uri) -> a
    java.util.concurrent.atomic.AtomicInteger access$0(org.apache.cordova.PluginManager) -> a
    org.apache.cordova.CordovaInterface access$1(org.apache.cordova.PluginManager) -> b
    void access$2(org.apache.cordova.PluginManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
org.apache.cordova.PluginManager$1 -> a.a.a.ay:
    org.apache.cordova.PluginManager this$0 -> a
    java.lang.String val$service -> b
    java.lang.String val$action -> c
    java.lang.String val$callbackId -> d
    java.lang.String val$rawArgs -> e
    void run() -> run
org.apache.cordova.PluginManager$PluginManagerService -> a.a.a.az:
    org.apache.cordova.PluginManager this$0 -> d
    boolean execute(java.lang.String,org.apache.cordova.CordovaArgs,org.apache.cordova.CallbackContext) -> a
    org.apache.cordova.PluginManager access$1(org.apache.cordova.PluginManager$PluginManagerService) -> a
org.apache.cordova.PluginManager$PluginManagerService$1 -> a.a.a.ba:
    org.apache.cordova.PluginManager$PluginManagerService this$1 -> a
    void run() -> run
org.apache.cordova.PluginResult -> a.a.a.bb:
    int status -> b
    int messageType -> c
    boolean keepCallback -> d
    java.lang.String strMessage -> e
    java.lang.String encodedMessage -> f
    java.lang.String[] StatusMessages -> a
    int getStatus() -> a
    int getMessageType() -> b
    java.lang.String getMessage() -> c
    java.lang.String getStrMessage() -> d
    boolean getKeepCallback() -> e
org.apache.cordova.PluginResult$Status -> a.a.a.bc:
    org.apache.cordova.PluginResult$Status NO_RESULT -> a
    org.apache.cordova.PluginResult$Status OK -> b
    org.apache.cordova.PluginResult$Status CLASS_NOT_FOUND_EXCEPTION -> c
    org.apache.cordova.PluginResult$Status ILLEGAL_ACCESS_EXCEPTION -> d
    org.apache.cordova.PluginResult$Status INSTANTIATION_EXCEPTION -> e
    org.apache.cordova.PluginResult$Status MALFORMED_URL_EXCEPTION -> f
    org.apache.cordova.PluginResult$Status IO_EXCEPTION -> g
    org.apache.cordova.PluginResult$Status INVALID_ACTION -> h
    org.apache.cordova.PluginResult$Status JSON_EXCEPTION -> i
    org.apache.cordova.PluginResult$Status ERROR -> j
    org.apache.cordova.PluginResult$Status[] ENUM$VALUES -> k
    org.apache.cordova.PluginResult$Status[] values() -> values
    org.apache.cordova.PluginResult$Status valueOf(java.lang.String) -> valueOf
org.apache.cordova.ScrollEvent -> a.a.a.bd:
    int l -> a
    int t -> b
    int nl -> c
    int nt -> d
    android.view.View targetView -> e
org.apache.cordova.Whitelist -> a.a.a.be:
    java.util.ArrayList whiteList -> a
    void addWhiteListEntry(java.lang.String,boolean) -> a
    boolean isUrlWhiteListed(java.lang.String) -> a
org.apache.cordova.Whitelist$URLPattern -> a.a.a.bf:
    java.util.regex.Pattern scheme -> a
    java.util.regex.Pattern host -> b
    java.lang.Integer port -> c
    java.util.regex.Pattern path -> d
    java.lang.String regexFromPattern(java.lang.String,boolean) -> a
    boolean matches(android.net.Uri) -> a
